// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AuctionEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuctionEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AuctionEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AuctionEntity", id.toString(), this);
    }
  }

  static load(id: string): AuctionEntity | null {
    return changetype<AuctionEntity | null>(store.get("AuctionEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get highestBid(): BigInt {
    let value = this.get("highestBid");
    return value!.toBigInt();
  }

  set highestBid(value: BigInt) {
    this.set("highestBid", Value.fromBigInt(value));
  }

  get auctionEnded(): boolean {
    let value = this.get("auctionEnded");
    return value!.toBoolean();
  }

  set auctionEnded(value: boolean) {
    this.set("auctionEnded", Value.fromBoolean(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value!.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get highestBidder(): Bytes {
    let value = this.get("highestBidder");
    return value!.toBytes();
  }

  set highestBidder(value: Bytes) {
    this.set("highestBidder", Value.fromBytes(value));
  }
}
