// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class auctionCreated extends ethereum.Event {
  get params(): auctionCreated__Params {
    return new auctionCreated__Params(this);
  }
}

export class auctionCreated__Params {
  _event: auctionCreated;

  constructor(event: auctionCreated) {
    this._event = event;
  }

  get beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class auctionEnded extends ethereum.Event {
  get params(): auctionEnded__Params {
    return new auctionEnded__Params(this);
  }
}

export class auctionEnded__Params {
  _event: auctionEnded;

  constructor(event: auctionEnded) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class bidCreated extends ethereum.Event {
  get params(): bidCreated__Params {
    return new bidCreated__Params(this);
  }
}

export class bidCreated__Params {
  _event: bidCreated;

  constructor(event: bidCreated) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class highestBidIncreased extends ethereum.Event {
  get params(): highestBidIncreased__Params {
    return new highestBidIncreased__Params(this);
  }
}

export class highestBidIncreased__Params {
  _event: highestBidIncreased;

  constructor(event: highestBidIncreased) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class withdrawReq extends ethereum.Event {
  get params(): withdrawReq__Params {
    return new withdrawReq__Params(this);
  }
}

export class withdrawReq__Params {
  _event: withdrawReq;

  constructor(event: withdrawReq) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Auction extends ethereum.SmartContract {
  static bind(address: Address): Auction {
    return new Auction("Auction", address);
  }

  auctionEndTime(): BigInt {
    let result = super.call("auctionEndTime", "auctionEndTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_auctionEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionEndTime",
      "auctionEndTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  beneficiary(): Address {
    let result = super.call("beneficiary", "beneficiary():(address)", []);

    return result[0].toAddress();
  }

  try_beneficiary(): ethereum.CallResult<Address> {
    let result = super.tryCall("beneficiary", "beneficiary():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  highestBidder(): Address {
    let result = super.call("highestBidder", "highestBidder():(address)", []);

    return result[0].toAddress();
  }

  try_highestBidder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "highestBidder",
      "highestBidder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  highestbid(): BigInt {
    let result = super.call("highestbid", "highestbid():(uint256)", []);

    return result[0].toBigInt();
  }

  try_highestbid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("highestbid", "highestbid():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _biddingTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuctionEndCall extends ethereum.Call {
  get inputs(): AuctionEndCall__Inputs {
    return new AuctionEndCall__Inputs(this);
  }

  get outputs(): AuctionEndCall__Outputs {
    return new AuctionEndCall__Outputs(this);
  }
}

export class AuctionEndCall__Inputs {
  _call: AuctionEndCall;

  constructor(call: AuctionEndCall) {
    this._call = call;
  }
}

export class AuctionEndCall__Outputs {
  _call: AuctionEndCall;

  constructor(call: AuctionEndCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
